        enum Mounth
        {
            январь,
            февраль,
            март,
            апрель,
            май,
            июнь,
            июль,
            август,
            сентябрь,
            октябрь,
            ноябрь,
            декабрь
        }

        enum Days
        {
            Sat, Sun, Mon, Tue, Wed, Thu, Fri
        }

{
    /// <summary>
    /// Класс MathArifmetic
    /// </summary>
    class MathArifmetic
    {
        /// <summary>
        /// Перечисление арифметических действий
        /// </summary>
        public enum Math
        {
            add = 1,
            sub,
            mul,
            div,
        }

        /// <summary>
        /// Перечисление для выхода
        /// </summary>
        public enum Exit
        {
            exit = 0
        }

        /// <summary>
        /// Статический метод для сложения, вычитания, умножения, деления
        /// </summary>
        /// <param name="x">1-ое число</param>
        /// <param name="y">2-ое число</param>
        /// <param name="result">результат арифметических действий</param>
        /// <returns>арифметические действия</returns>
        public static double All_Sum_Sub_Mul_Div(double x, double y, int result)
        {
            switch ((Math)result)
            {
                case Math.add:
                    Console.Write($"Результат сложения: {x+y}");
                    (x + y).ToString();
                    break;
                case Math.sub:
                    Console.Write($"Результат вычитания: {x-y}");
                    (x - y).ToString();
                    break;
                case Math.mul:
                    Console.Write($"Результат умножения: {x*y}");
                    (x * y).ToString();
                    break;
                case Math.div:
                    Console.Write($"Результат делелния: {x/y}");
                    (x / y).ToString();
                    break;
            }
            return result;
        }

        /// <summary>
        /// Статический метод ExitProgram
        /// </summary>
        /// <param name="result">результа</param>
        /// <returns>выход из программы</returns>
        public static int ExitProgram(int result)
        {
            switch ((Exit)result)
            {
                case Exit.exit:
                    break;
            }
            return result;
        }
    }
}

{
    /// <summary>
    /// Класс Roles
    /// </summary>
    class Roles
    {
        /// <summary>
        /// Перечисление ролей
        /// </summary>
        public enum UserRole
        {
            Администратор,
            Модератор,
            Пользователь,
            Гость
        }
    }
}

{
    /// <summary>
    /// Класс Accauntant
    /// </summary>
    class Accauntant
    {
        /// <summary>
        /// Перечисление сотрудников
        /// </summary>
        public enum Post
        {
            Менеджер = 160,
            Программист = 180,
            Дизайнер = 140,
            Тестировщик = 170
        }

        /// <summary>
        /// Метод для определения того, сколько работник отработал.
        /// </summary>
        /// <param name="worker">работника</param>
        /// <param name="hours">часы</param>
        /// <returns></returns>
        public bool AksForBounds(Post worker, int hours)
        {
            int required = (int)worker;

            if (hours > required)
            {
                return true;
            }

            else
            {
                return false;
            }
        }
    }
}

    class Program
    {
        static void Main(string[] args)
        {
            //1-Задание
            //Mounth i;
            //for (i = Mounth.январь; i <= Mounth.декабрь; i++)
            //{
            //    Console.WriteLine((int)i + "\t " + i);
            //}

            //2-Задание
            //Days i;
            //for (i = Days.Sat; i <= Days.Fri; i++)
            //{
            //    Console.WriteLine(i+ " имеет значение " +(int)i);
            //}

            //3-Задание
            foreach (MathArifmetic.Math math in Enum.GetValues(typeof(MathArifmetic.Math)))
            {
                Console.WriteLine($"{(int)math} - {math}");
            }

            Console.WriteLine("Здесь вам представлены арифметические действия.");
            Console.WriteLine("Вы можете сложить, вычесть, умножить или разделить числа: ");
            Console.Write("Введите номер арифметического действия: ");
            int result = int.Parse(Console.ReadLine());
            while (true)
            {
                switch (result)
                {
                    default:
                        if (result == 0 && result >= 5)
                        {
                            MathArifmetic.ExitProgram(result);
                        }
                        break;
                }

                if (result > 0 && result < 5)
                {
                    Console.WriteLine("Теперь укажите числа. ");
                    Console.Write("Введите первое число: ");
                    double x = double.Parse(Console.ReadLine());
                    Console.Write("Введите второе число: ");
                    double y = double.Parse(Console.ReadLine());
                    MathArifmetic.All_Sum_Sub_Mul_Div(x, y, result);
                }
                break;
            }

            //4-Задание
            Console.WriteLine("Вам представлено перечисление ролей: ");
            
            foreach (Roles.UserRole userRole in Enum.GetValues(typeof(Roles.UserRole)))
            {
                Console.WriteLine($"{userRole}");
            }

            Console.WriteLine("Вы можете зайти под одно из них. И вам покажет под каким вы зарегестрированы.");
            Console.WriteLine("Можете войти: 1)Admin, 2)Moder, 3)User, 4)Guest");
            Console.Write("Введите одну из ролей: ");
            string stroka = Console.ReadLine().Trim().ToLower();

            Roles.UserRole userRole1 = Roles.UserRole.Гость;
            switch (stroka)
            {
                case "admin":
                    userRole1 = Roles.UserRole.Администратор;
                    break;

                case "moder":
                    userRole1 = Roles.UserRole.Модератор;
                    break;

                case "user":
                    userRole1 = Roles.UserRole.Пользователь;
                    break;

                case "guest":
                    userRole1 = Roles.UserRole.Гость;
                    break;

                default:
                    Console.WriteLine("«не содержит ни одного из приведенных рекомендаций»");
                    return;
            }

            switch (userRole1)
            {
                case Roles.UserRole.Администратор:
                    Console.WriteLine("«Вы зарегистрированы как администратор»");
                    break;

                case Roles.UserRole.Модератор:
                    Console.WriteLine("«Вы зарегистрированы как модератор»");
                    break;

                case Roles.UserRole.Пользователь:
                    Console.WriteLine("«Вы зарегистрированы как пользователь»");
                    break;

                case Roles.UserRole.Гость:
                    Console.WriteLine("«Вы зарегистрированы как гость»");
                    break;
            }

            //5-Задание
            Console.WriteLine("Введите должность сотрудника (Менеджер, Программист, Дизайнер, Тестировщик):");
            string postInput = Console.ReadLine().Trim();

            Console.WriteLine("Введите количество отработанных часов за месяц: ");
            if (int.TryParse(Console.ReadLine().Trim(), out int hoursworked))
            {
                if (Enum.TryParse(postInput, true, out Accauntant.Post post))
                {
                    Accauntant accauntant = new Accauntant();

                    if (accauntant.AksForBounds(post, hoursworked))
                    {
                        Console.WriteLine("Сотруднику положена премия");
                    }

                    else
                    {
                        Console.WriteLine("Сотруднику неположена премия");
                    }
                }

                else
                {
                    Console.WriteLine("Некорректная должность сотдуника");
                }
            }

            else
            {
                Console.WriteLine("Некорректное введение обработанных часов.");
            }
            Console.ReadKey();
        }
    }
}
